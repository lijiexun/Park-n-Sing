data <- filter(data, !is.na(gender))
data <- filter(data, !is.na(professional.diagnosis))
data <- filter(data, !is.na(smartphone))
nrow(filter(data, professional.diagnosis==TRUE))
nrow(filter(data, professional.diagnosis==TRUE, !is.na(diagnosis.year)))
nrow(filter(data, professional.diagnosis==FALSE))
nrow(filter(data, professional.diagnosis==FALSE, !is.na(diagnosis.year)))
summary(data$smartphone)
# Code smartphone as 1, 2, 3, 4
data$smartphone <- as.numeric(recode(data$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data)
mpower.lm <- lm(count_activity~age+gender+professional.diagnosis+smartphone, data=data)
summary(mpower.lm)
mpower.lm2 <- lm(log(count_activity+1)~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.lm2)
library(MASS)
mpower.nb.mds <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.nb.pdq <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.nb <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.nb.mds)
summary(mpower.nb.pdq)
summary(mpower.nb)
mpower.nb <- glm(days_access~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.nb)
summary(data$avg_tapping_score)
summary(data$avg_memory_score)
summary(data$sd_tapping_score)
pairs(data$avg_tapping_score, data$mds.mild, data$mds.cogn, data$mds.motor, data$mds.both)
plot(data.frame(data$avg_tapping_score, data$mds.mild, data$mds.cogn, data$mds.motor, data$mds.both))
plot(data$avg_tapping_score, data$mds.cogn)
plot(data$mds.cogn, data$avg_tapping_score)
boxplot(data$mds.cogn, data$avg_tapping_score)
summary(data$mds.cogn)
plot(data$mds.cogn, data$avg_tapping_score)
plot(data$mds.cogn, data$avg_tapping_score)
plot(data$mds.motor, data$avg_tapping_score)
plot(data$mds.both, data$avg_tapping_score)
cor(data$mds.cogn, data$avg_tapping_score)
cor(data$mds.motor, data$avg_tapping_score)
data_tap = filter(data, !is.na(avg_tapping_score))
summary(data_tap$avg_tapping_score)
cor(data$mds.cogn, data$avg_tapping_score)
summary(data_tap$mds.cogn)
summary(data_tap$avg_tapping_score)
cor(data_tap$mds.cogn, data_tap$avg_tapping_score)
cor(data_tap$mds.cogn, data_tap$avg_tapping_score)
cor(data_tap$mds.motor, data_tap$avg_tapping_score)
cor(data_tap$mds.both, data_tap$avg_tapping_score)
# Find the ones who have conducted both MDS and PDQ surveys at least once.
data_tap <- filter(mpower.df,mds.count>0,pdq.count>0)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_tap = filter(data_tap, !is.na(avg_tapping_score))
summary(data_tap$mds.cogn)
summary(data_tap$avg_tapping_score)
summary(data$mds.cogn)
names(data_tap)
cor(data_tap$mds.cogn, data_tap$avg_tapping_score)
summary(data_tap$avg_tapping_score)
sum(is.na(data_tap$age))
nrow(filter(data_tap, professional.diagnosis==TRUE))
nrow(filter(data_tap, professional.diagnosis==FALSE))
hist(data_tap$count_tapping, breaks=30)
boxplot(log(data_tap$count_tapping+1),data_tap$professional.diagnosis)
summary(filter(data_tap, professional.diagnosis==TRUE)$count_tapping)
summary(filter(data_tap, professional.diagnosis==FALSE)$count_tapping)
data_tap <- select(data_tap,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
data_tap <- dplyr::select(data_tap,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
# rename mds, pdq cluster names
data_tap <- rename(data_tap, mds.mild=mds.c1, mds.cogn=mds.c2, mds.motor=mds.c4, mds.both=mds.c3)
data_tap <- rename(data_tap, pdq.mild=pdq.c4, pdq.cogn=pdq.c1, pdq.motor=pdq.c3, pdq.both=pdq.c2)
data_tap <- filter(data_tap, !is.na(age))
data_tap <- filter(data_tap, !is.na(gender))
data_tap <- filter(data_tap, !is.na(professional.diagnosis))
data_tap <- filter(data_tap, !is.na(smartphone))
nrow(filter(data_tap, professional.diagnosis==TRUE))
nrow(filter(data_tap, professional.diagnosis==TRUE, !is.na(diagnosis.year)))
nrow(filter(data_tap, professional.diagnosis==FALSE))
nrow(filter(data_tap, professional.diagnosis==FALSE, !is.na(diagnosis.year)))
summary(data$smartphone)
# Code smartphone as 1, 2, 3, 4
data$smartphone <- as.numeric(recode(data$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data)
summary(data_tap$smartphone)
# Code smartphone as 1, 2, 3, 4
data_tap$smartphone <- as.numeric(recode(data_tap$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data)
search()
mpower.tap.lm <- lm(count_activity~age+gender+professional.diagnosis+smartphone, data=data_tap)
summary(mpower.tap.lm)
mpower.tap.lm <- lm(log(count_tapping+1)~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.lm)
mpower.tap.lm <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.lm)
mpower.tap.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_tapping_score, data=data_tap)
mpower.tap.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.lm1)
summary(mpower.tap.lm2)
summary(mpower.tap.lm3)
summary(mpower.tap.lm4)
mpower.tap.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data_tap)
summary(mpower.tap.lm2)
# Find the ones who have conducted both MDS and PDQ surveys at least once.
data_mem <- filter(mpower.df,mds.count>0,pdq.count>0)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_tapping_score))
summary(data_mem$avg_tapping_score)
sum(is.na(data_mem$age))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
hist(data_mem$count_tapping, breaks=30)
boxplot(log(data_mem$count_tapping+1),data_mem$professional.diagnosis)
summary(filter(data_mem, professional.diagnosis==TRUE)$count_tapping)
summary(filter(data_mem, professional.diagnosis==FALSE)$count_tapping)
# diagnosed patients used the app more often than the others.
data_mem <- dplyr::select(data_mem,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
# rename mds, pdq cluster names
data_mem <- rename(data_mem, mds.mild=mds.c1, mds.cogn=mds.c2, mds.motor=mds.c4, mds.both=mds.c3)
data_mem <- rename(data_mem, pdq.mild=pdq.c4, pdq.cogn=pdq.c1, pdq.motor=pdq.c3, pdq.both=pdq.c2)
# Remove data with age==NA
data_mem <- filter(data_mem, !is.na(age))
data_mem <- filter(data_mem, !is.na(gender))
data_mem <- filter(data_mem, !is.na(professional.diagnosis))
data_mem <- filter(data_mem, !is.na(smartphone))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
summary(data_mem$smartphone)
# Code smartphone as 1, 2, 3, 4
data_mem$smartphone <- as.numeric(recode(data_mem$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data_mem)
mpower.mem.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
# Find the ones who have conducted both MDS and PDQ surveys at least once.
data_mem <- filter(mpower.df,mds.count>0,pdq.count>0)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_memory_score))
summary(data_mem$avg_memory_score)
sum(is.na(data_mem$age))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
hist(data_mem$count_tapping, breaks=30)
boxplot(log(data_mem$count_tapping+1),data_mem$professional.diagnosis)
summary(filter(data_mem, professional.diagnosis==TRUE)$count_tapping)
summary(filter(data_mem, professional.diagnosis==FALSE)$count_tapping)
# diagnosed patients used the app more often than the others.
data_mem <- dplyr::select(data_mem,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
# rename mds, pdq cluster names
data_mem <- rename(data_mem, mds.mild=mds.c1, mds.cogn=mds.c2, mds.motor=mds.c4, mds.both=mds.c3)
data_mem <- rename(data_mem, pdq.mild=pdq.c4, pdq.cogn=pdq.c1, pdq.motor=pdq.c3, pdq.both=pdq.c2)
# Remove data with age==NA
data_mem <- filter(data_mem, !is.na(age))
data_mem <- filter(data_mem, !is.na(gender))
data_mem <- filter(data_mem, !is.na(professional.diagnosis))
data_mem <- filter(data_mem, !is.na(smartphone))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
summary(data_mem$smartphone)
# Code smartphone as 1, 2, 3, 4
data_mem$smartphone <- as.numeric(recode(data_mem$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data_mem)
mpower.mem.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
hist(data_mem$count_memory, breaks=30)
boxplot(log(data_mem$count_memory+1),data_mem$professional.diagnosis)
# Find the ones who have conducted both MDS and PDQ surveys at least once.
data_mem <- filter(mpower.df,mds.count>0,pdq.count>0)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_memory_score))
summary(data_mem$avg_memory_score)
sum(is.na(data_mem$age))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
hist(data_mem$count_memory, breaks=30)
boxplot(log(data_mem$count_memory+1),data_mem$professional.diagnosis)
summary(filter(data_mem, professional.diagnosis==TRUE)$count_tapping)
summary(filter(data_mem, professional.diagnosis==FALSE)$count_tapping)
# diagnosed patients used the app more often than the others.
data_mem <- dplyr::select(data_mem,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
# rename mds, pdq cluster names
data_mem <- rename(data_mem, mds.mild=mds.c1, mds.cogn=mds.c2, mds.motor=mds.c4, mds.both=mds.c3)
data_mem <- rename(data_mem, pdq.mild=pdq.c4, pdq.cogn=pdq.c1, pdq.motor=pdq.c3, pdq.both=pdq.c2)
# Remove data with age==NA
data_mem <- filter(data_mem, !is.na(age))
data_mem <- filter(data_mem, !is.na(gender))
data_mem <- filter(data_mem, !is.na(professional.diagnosis))
data_mem <- filter(data_mem, !is.na(smartphone))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
summary(data_mem$smartphone)
# Code smartphone as 1, 2, 3, 4
data_mem$smartphone <- as.numeric(recode(data_mem$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data_mem)
mpower.mem.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
mpower.mem.lm1 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_tap = filter(data, !is.na(avg_tapping_score))
mpower.tap.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_tapping_score, data=data_tap)
mpower.tap.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.lm1)
summary(mpower.tap.lm2)
summary(mpower.tap.lm3)
summary(mpower.tap.lm4)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_memory_score))
mpower.mem.lm1 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
mpower.walk.lm1 <- lm(count_walking~age+gender+professional.diagnosis+smartphone, data=data)
mpower.walk.lm2 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.walk.lm3 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.walk.lm4 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.walk.lm1)
summary(mpower.walk.lm2)
summary(mpower.walk.lm3)
summary(mpower.walk.lm4)
mpower.voice.lm1 <- lm(count_voice~age+gender+professional.diagnosis+smartphone, data=data)
mpower.voice.lm2 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.voice.lm3 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.voice.lm4 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.voice.lm1)
summary(mpower.voice.lm2)
summary(mpower.voice.lm3)
summary(mpower.voice.lm4)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb)
mpower.tap.nb.mds <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.nb.pdq <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb.mds)
summary(mpower.tap.nb.pdq)
summary(mpower.tap.nb)
mpower.mem.nb.mds <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_mem)
mpower.mem.nb.pdq <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_mem)
mpower.mem.nb <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.nb.mds)
summary(mpower.mem.nb.pdq)
summary(mpower.mem.nb)
mpower.mem.nb.mds <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.nb.pdq <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.nb <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.nb.mds)
summary(mpower.mem.nb.pdq)
summary(mpower.mem.nb)
mpower.walk.nb.mds <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data)
mpower.walk.nb.pdq <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data)
mpower.walk.nb <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data)
summary(mpower.walk.nb.mds)
summary(mpower.walk.nb.pdq)
summary(mpower.walk.nb)
mpower.walk.nb.mds <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.walk.nb.pdq <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.walk.nb <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.walk.nb.mds)
summary(mpower.walk.nb.pdq)
summary(mpower.walk.nb)
mpower.voice.nb.mds <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.voice.nb.pdq <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.voice.nb <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.voice.nb.mds)
summary(mpower.voice.nb.pdq)
summary(mpower.voice.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.lm1 <- lm(count_activity~age+gender+smartphone, data=data.T)
mpower.T.lm2 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.lm3 <- lm(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.lm4 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.lm1)
summary(mpower.T.lm2)
summary(mpower.T.lm3)
summary(mpower.T.lm4)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.lm1 <- lm(count_activity~age+gender+smartphone, data=data.T)
mpower.T.lm2 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.lm3 <- lm(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.lm4 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.lm1)
summary(mpower.T.lm2)
summary(mpower.T.lm3)
summary(mpower.T.lm4)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_tap = filter(data, !is.na(avg_tapping_score))
mpower.tap.nb1 <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data_tap)
mpower.tap.nb.mds <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.nb.pdq <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb1)
summary(mpower.tap.nb.mds)
summary(mpower.tap.nb.pdq)
summary(mpower.tap.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
mpower.nb.interaction <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+professional.diagnosis:mds.cogn+professional.diagnosis:mds.motor+professional.diagnosis:mds.both, data=data)
mpower.nb.mds <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
summary(mpower.nb.interaction)
summary(mpower.nb.mds)
library(dplyr)
mpower=read.csv("../Data/parkinson_data.csv", header=T, na.strings="")
dim(mpower)
mpower$count_access <- mpower$count_survey + mpower$count_activity
attach(mpower)
# Count the number of rows with age = NA.
sum(is.na(mpower$age))
# histogram of age
summary(age)
hist(age, col=8)
age_bin<-cut(mpower$age, c(0,10,20,30,40,50,60,70,80,90))
barplot(table(age_bin), col=8, cex.names=0.75)
# Count the number of rows with are.caretaker = NA.
sum(is.na(are.caretaker))
# histogram of are.caretaker
summary(are.caretaker)
barplot(table(are.caretaker), col=8, cex.names=0.75)
# Count the number of rows with deep.brain.stimulation = NA.
sum(is.na(deep.brain.stimulation))
# histogram of deep.brain.stimulation
summary(deep.brain.stimulation)
barplot(table(deep.brain.stimulation), col=8, cex.names=0.75)
summary(mpower$professional.diagnosis)
sum(is.na(professional.diagnosis))
barplot(table(professional.diagnosis), col=8)
# Count the number of rows with diagnosis.year = NA.
sum(is.na(diagnosis.year))
# histogram of diagnosis.year
summary(diagnosis.year)
barplot(table(diagnosis.year), col=8, cex.names=0.75)
# Count the number of rows with education = NA.
sum(is.na(education))
# histogram of education
summary(education)
barplot(table(education), col=8, cex.names=0.35)
# Count the number of rows with employment = NA.
sum(is.na(employment))
# histogram of employment
summary(employment)
barplot(table(employment), col=8, cex.names=0.5)
# Count the number of rows with gender = NA.
sum(is.na(gender))
# histogram of gender
summary(gender)
barplot(table(gender), col=8, cex.names=0.75)
# Count the number of rows with maritalStatus = NA.
sum(is.na(maritalStatus))
# histogram of maritalStatus
summary(maritalStatus)
barplot(table(maritalStatus), col=8, cex.names=0.5)
# Count the number of rows with medical.usage = NA.
sum(is.na(medical.usage))
# histogram of medical.usage
summary(medical.usage)
barplot(table(medical.usage), col=8, cex.names=0.75)
# Count the number of rows with smartphone = NA.
sum(is.na(smartphone))
# histogram of smartphone
summary(smartphone)
barplot(table(smartphone), col=8, cex.names=0.75)
summary(data.frame(count_survey, count_MDS, count_PDQ8))
plot(data.frame(count_survey, count_MDS, count_PDQ8))
summary(data.frame(count_activity, count_tapping, count_voice, count_walking, count_memory))
plot(data.frame(count_activity, count_tapping, count_voice, count_walking, count_memory))
mds=read.csv("../Data/MDS-UPDRS.csv", header=T, na.strings="")
dim(mds)
# GELTQ-1a~c contains abnormal values. Remove outliers.
mds<-filter(mds, GELTQ.1a<=40, GELTQ.1b<=50, GELTQ.1c<=60)
dim(mds)
# Count the number of NULLs for the questions
tempfun = function(arow){
sum(is.na(arow))
}
mds$no.answers = apply(mds[,11:26], 1, tempfun)
# remove data points with over half (8) null answers
mds<-filter(mds, no.answers<8)
mds<-dplyr::select(mds, -no.answers)
dim(mds)
# Recode variable GELTQ.2 to (1,2,3)
mds$GELTQ.2 <- as.numeric(recode(mds$GELTQ.2, 'Never/Rarely'=1, 'Sometimes'=2, 'Often'=3))
# Replace all NULL values with median.
for (i in 6:26){
mds[,i][is.na(mds[,i])] <- median(mds[,i], na.rm=TRUE)
}
setwd("C:/Workspace/Park-n-Sing/Rscripts")
