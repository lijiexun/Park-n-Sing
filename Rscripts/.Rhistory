nrow(filter(data_mem, professional.diagnosis==FALSE))
summary(data_mem$smartphone)
# Code smartphone as 1, 2, 3, 4
data_mem$smartphone <- as.numeric(recode(data_mem$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data_mem)
mpower.mem.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
hist(data_mem$count_memory, breaks=30)
boxplot(log(data_mem$count_memory+1),data_mem$professional.diagnosis)
# Find the ones who have conducted both MDS and PDQ surveys at least once.
data_mem <- filter(mpower.df,mds.count>0,pdq.count>0)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_memory_score))
summary(data_mem$avg_memory_score)
sum(is.na(data_mem$age))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
hist(data_mem$count_memory, breaks=30)
boxplot(log(data_mem$count_memory+1),data_mem$professional.diagnosis)
summary(filter(data_mem, professional.diagnosis==TRUE)$count_tapping)
summary(filter(data_mem, professional.diagnosis==FALSE)$count_tapping)
# diagnosed patients used the app more often than the others.
data_mem <- dplyr::select(data_mem,
age, gender, race_Black.or.African:race_White.or.Caucasian,
education, employment, maritalStatus,
are.caretaker, past.participation,
smartphone, phone.usage, home.usage, medical.usage, medical.usage.yesterday, video.usage,
professional.diagnosis, onset.year, diagnosis.year, medication.start.year,
healthcare.provider, deep.brain.stimulation, surgery,
smoked, years.smoking, packs.per.day, last.smoked,
health_AIDS.or.HIV:health_Urinary.Tract.infections,
mds.c1:mds.c4, pdq.c1:pdq.c4,
days_survey, days_activity, days_access,
count_MDS:count_walking, count_access, mds.count, pdq.count, survey.count,
avg_tapping_score,avg_memory_score)
# rename mds, pdq cluster names
data_mem <- rename(data_mem, mds.mild=mds.c1, mds.cogn=mds.c2, mds.motor=mds.c4, mds.both=mds.c3)
data_mem <- rename(data_mem, pdq.mild=pdq.c4, pdq.cogn=pdq.c1, pdq.motor=pdq.c3, pdq.both=pdq.c2)
# Remove data with age==NA
data_mem <- filter(data_mem, !is.na(age))
data_mem <- filter(data_mem, !is.na(gender))
data_mem <- filter(data_mem, !is.na(professional.diagnosis))
data_mem <- filter(data_mem, !is.na(smartphone))
nrow(filter(data_mem, professional.diagnosis==TRUE))
nrow(filter(data_mem, professional.diagnosis==FALSE))
summary(data_mem$smartphone)
# Code smartphone as 1, 2, 3, 4
data_mem$smartphone <- as.numeric(recode(data_mem$smartphone, 'Very Difficult'=1, 'Difficult'=2, 'Neither easy nor difficult'=3, 'Easy'=4, 'Very easy'=5))
nrow(data_mem)
mpower.mem.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
mpower.mem.lm1 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_tap = filter(data, !is.na(avg_tapping_score))
mpower.tap.lm1 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+avg_tapping_score, data=data_tap)
mpower.tap.lm2 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.lm3 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.lm4 <- lm(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.lm1)
summary(mpower.tap.lm2)
summary(mpower.tap.lm3)
summary(mpower.tap.lm4)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_mem = filter(data_mem, !is.na(avg_memory_score))
mpower.mem.lm1 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+avg_memory_score, data=data_mem)
mpower.mem.lm2 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.lm3 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.lm4 <- lm(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.lm1)
summary(mpower.mem.lm2)
summary(mpower.mem.lm3)
summary(mpower.mem.lm4)
mpower.walk.lm1 <- lm(count_walking~age+gender+professional.diagnosis+smartphone, data=data)
mpower.walk.lm2 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.walk.lm3 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.walk.lm4 <- lm(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.walk.lm1)
summary(mpower.walk.lm2)
summary(mpower.walk.lm3)
summary(mpower.walk.lm4)
mpower.voice.lm1 <- lm(count_voice~age+gender+professional.diagnosis+smartphone, data=data)
mpower.voice.lm2 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.voice.lm3 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.voice.lm4 <- lm(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.voice.lm1)
summary(mpower.voice.lm2)
summary(mpower.voice.lm3)
summary(mpower.voice.lm4)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb)
mpower.tap.nb.mds <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.nb.pdq <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb.mds)
summary(mpower.tap.nb.pdq)
summary(mpower.tap.nb)
mpower.mem.nb.mds <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_mem)
mpower.mem.nb.pdq <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_mem)
mpower.mem.nb <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.nb.mds)
summary(mpower.mem.nb.pdq)
summary(mpower.mem.nb)
mpower.mem.nb.mds <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data_mem)
mpower.mem.nb.pdq <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
mpower.mem.nb <- glm.nb(count_memory~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data_mem)
summary(mpower.mem.nb.mds)
summary(mpower.mem.nb.pdq)
summary(mpower.mem.nb)
mpower.walk.nb.mds <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_memory_score, data=data)
mpower.walk.nb.pdq <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data)
mpower.walk.nb <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_memory_score, data=data)
summary(mpower.walk.nb.mds)
summary(mpower.walk.nb.pdq)
summary(mpower.walk.nb)
mpower.walk.nb.mds <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.walk.nb.pdq <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.walk.nb <- glm.nb(count_walking~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.walk.nb.mds)
summary(mpower.walk.nb.pdq)
summary(mpower.walk.nb)
mpower.voice.nb.mds <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
mpower.voice.nb.pdq <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data)
mpower.voice.nb <- glm.nb(count_voice~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data)
summary(mpower.voice.nb.mds)
summary(mpower.voice.nb.pdq)
summary(mpower.voice.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.lm1 <- lm(count_activity~age+gender+smartphone, data=data.T)
mpower.T.lm2 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.lm3 <- lm(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.lm4 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.lm1)
summary(mpower.T.lm2)
summary(mpower.T.lm3)
summary(mpower.T.lm4)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.lm1 <- lm(count_activity~age+gender+smartphone, data=data.T)
mpower.T.lm2 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.lm3 <- lm(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.lm4 <- lm(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.lm1)
summary(mpower.T.lm2)
summary(mpower.T.lm3)
summary(mpower.T.lm4)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
# Find the ones who has an average tapping score, i.e., has completed tapping at least once.
data_tap = filter(data, !is.na(avg_tapping_score))
mpower.tap.nb1 <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data_tap)
mpower.tap.nb.mds <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+avg_tapping_score, data=data_tap)
mpower.tap.nb.pdq <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
mpower.tap.nb <- glm.nb(count_tapping~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both+avg_tapping_score, data=data_tap)
summary(mpower.tap.nb1)
summary(mpower.tap.nb.mds)
summary(mpower.tap.nb.pdq)
summary(mpower.tap.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==TRUE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
data.T = filter(data, professional.diagnosis==FALSE)
mpower.T.nb.mds <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both, data=data.T)
mpower.T.nb.pdq <- glm.nb(count_activity~age+gender+smartphone+pdq.cogn+pdq.motor+pdq.both, data=data.T)
mpower.T.nb <- glm.nb(count_activity~age+gender+smartphone+mds.cogn+mds.motor+mds.both+pdq.cogn+pdq.motor+pdq.both, data=data.T)
summary(mpower.T.nb.mds)
summary(mpower.T.nb.pdq)
summary(mpower.T.nb)
mpower.nb.interaction <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both+professional.diagnosis:mds.cogn+professional.diagnosis:mds.motor+professional.diagnosis:mds.both, data=data)
mpower.nb.mds <- glm.nb(count_activity~age+gender+professional.diagnosis+smartphone+mds.cogn+mds.motor+mds.both, data=data)
summary(mpower.nb.interaction)
summary(mpower.nb.mds)
library(dplyr)
mpower=read.csv("../Data/parkinson_data.csv", header=T, na.strings="")
dim(mpower)
mpower$count_access <- mpower$count_survey + mpower$count_activity
attach(mpower)
# Count the number of rows with age = NA.
sum(is.na(mpower$age))
# histogram of age
summary(age)
hist(age, col=8)
age_bin<-cut(mpower$age, c(0,10,20,30,40,50,60,70,80,90))
barplot(table(age_bin), col=8, cex.names=0.75)
# Count the number of rows with are.caretaker = NA.
sum(is.na(are.caretaker))
# histogram of are.caretaker
summary(are.caretaker)
barplot(table(are.caretaker), col=8, cex.names=0.75)
# Count the number of rows with deep.brain.stimulation = NA.
sum(is.na(deep.brain.stimulation))
# histogram of deep.brain.stimulation
summary(deep.brain.stimulation)
barplot(table(deep.brain.stimulation), col=8, cex.names=0.75)
summary(mpower$professional.diagnosis)
sum(is.na(professional.diagnosis))
barplot(table(professional.diagnosis), col=8)
# Count the number of rows with diagnosis.year = NA.
sum(is.na(diagnosis.year))
# histogram of diagnosis.year
summary(diagnosis.year)
barplot(table(diagnosis.year), col=8, cex.names=0.75)
# Count the number of rows with education = NA.
sum(is.na(education))
# histogram of education
summary(education)
barplot(table(education), col=8, cex.names=0.35)
# Count the number of rows with employment = NA.
sum(is.na(employment))
# histogram of employment
summary(employment)
barplot(table(employment), col=8, cex.names=0.5)
# Count the number of rows with gender = NA.
sum(is.na(gender))
# histogram of gender
summary(gender)
barplot(table(gender), col=8, cex.names=0.75)
# Count the number of rows with maritalStatus = NA.
sum(is.na(maritalStatus))
# histogram of maritalStatus
summary(maritalStatus)
barplot(table(maritalStatus), col=8, cex.names=0.5)
# Count the number of rows with medical.usage = NA.
sum(is.na(medical.usage))
# histogram of medical.usage
summary(medical.usage)
barplot(table(medical.usage), col=8, cex.names=0.75)
# Count the number of rows with smartphone = NA.
sum(is.na(smartphone))
# histogram of smartphone
summary(smartphone)
barplot(table(smartphone), col=8, cex.names=0.75)
summary(data.frame(count_survey, count_MDS, count_PDQ8))
plot(data.frame(count_survey, count_MDS, count_PDQ8))
summary(data.frame(count_activity, count_tapping, count_voice, count_walking, count_memory))
plot(data.frame(count_activity, count_tapping, count_voice, count_walking, count_memory))
mds=read.csv("../Data/MDS-UPDRS.csv", header=T, na.strings="")
dim(mds)
# GELTQ-1a~c contains abnormal values. Remove outliers.
mds<-filter(mds, GELTQ.1a<=40, GELTQ.1b<=50, GELTQ.1c<=60)
dim(mds)
# Count the number of NULLs for the questions
tempfun = function(arow){
sum(is.na(arow))
}
mds$no.answers = apply(mds[,11:26], 1, tempfun)
# remove data points with over half (8) null answers
mds<-filter(mds, no.answers<8)
mds<-dplyr::select(mds, -no.answers)
dim(mds)
# Recode variable GELTQ.2 to (1,2,3)
mds$GELTQ.2 <- as.numeric(recode(mds$GELTQ.2, 'Never/Rarely'=1, 'Sometimes'=2, 'Often'=3))
# Replace all NULL values with median.
for (i in 6:26){
mds[,i][is.na(mds[,i])] <- median(mds[,i], na.rm=TRUE)
}
library(keras)
library(dplyr)
rm(list=ls())
setwd("C:/Workspace/Park-n-Sing/Rscripts")
cat('Loading data...\n')
load('../Data/tapdata_dataforLSTM_byperson.RData')
glimpse(data.train.byperson)
glimpse(data.test.byperson)
glimpse(timestamp)
glimpse(timestamp_scaled)
glmpse(tapdata2)
glimpse(tapdata2)
names(tapdata2)
tap <- arrange(tapdata2, healthCode, createdOn)
tap[1]
tap[1,]
tapdata2[1,]
x <- arrange(tapdata2, healthCode, createdOn)
y <- select(tapdata2, healthCode, professional.diagnosis)
y <- unique(y)
names(x)
x <- select(x, healthCod:corXY)
x <- select(x, healthCode:corXY)
tap <- arrange(tapdata2, healthCode, createdOn)
tap <- select(tap, healthCode:corXY)
y$healthCode[1:5]
nrow(tap)
tap[1]
tap[1,]
tap[1,1
tap[1,1]
tap[1,1]
idx = 1
tap[1,1]==y$healthCode[idx]
y$healthCode[idx]
y <- arrange(y, healthCod)
y <- arrange(y, healthCode)
y$healthCode[idx]
tap[1,1]==y$healthCode[idx]
x = list()
list.append(x, select(tap[1,],createdOn:corXY))
append(x, select(tap[1,],createdOn:corXY))
x
select(tap[1,],createdOn:corXY)
append(x, select(tap[1,],createdOn:corXY))
x
x[[1]] <- select(tap[1,],createdOn:corXY))
x[1] <- select(tap[1,],createdOn:corXY))
x[1] <- select(tap[1,],createdOn:corXY)
x[[1] <- select(tap[1,],createdOn:corXY)
}
}
x_train <- select(data.train.byperson, meanTapInter:corXY)
x_test <- select(data.test.byperson, meanTapInter:corXY)
y_train <- whichtraindata$professional.diagnosis
y_test <- whichtestdata$professional.diagnosis
cat(length(x_train), 'train sequences\n')
cat(length(x_test), 'test sequences\n')
x_train <- scale(x_train)
x_test <- scale(x_test)
# Cut texts after this number of words (among top max_features most common words)
#maxlen <- 80
#cat('Pad sequences (samples x time)\n')
#x_train <- pad_sequences(x_train, maxlen = maxlen)
#x_test <- pad_sequences(x_test, maxlen = maxlen)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
cat('x_train shape:', dim(x_train), '\n')
cat('x_test shape:', dim(x_test), '\n')
dim(x_train) <- c(nrow(x_train),1,ncol(x_train))  # re-dimension
dim(x_test) <- c(nrow(x_test),1,ncol(x_test))  # re-dimension
# Response variables for training and testing sets
y_train <- ifelse(y_train == TRUE, 1, 0)
y_test  <- ifelse(y_test == TRUE, 1, 0)
max_features <- 20000
batch_size <- 32
cat('Build model...\n')
model <- keras_model_sequential()
x
x = list()
x[[1]] <- select(tap[1,],createdOn:corXY)
x[[1]]
View(x)
maxlen = 10
x = list()
for (i in 1:nrow(y$healthCode)){
x[[i]] <- select(filter(tap, healthCode==y$healthCode[i]), createdOn:corXY)
}
for (i in 1:nrow(y)){
x[[i]] <- select(filter(tap, healthCode==y$healthCode[i]), createdOn:corXY)
}
x[[1]]
x = list()
for (i in 1:nrow(y)){
x[[y$healthCode[i]]] <- select(filter(tap, healthCode==y$healthCode[i]), createdOn:corXY)
}
x[[1]]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
load(file = "../Data/tapdata_dataforLSTM_byperson.RData")
mytap <- arrange(tapdata2, healthCode, createdOn)
mytap$createdOn = mytap$createdOn/1000
mytap2 <- dplyr::select(mytap, meanTapInter:corXY)
mytap2 = scale(mytap2, scale = TRUE) ## scale each column
mytap2 = cbind(mytap$createdOn, mytap2)
#mytap2 = cbind(mytap$healthCode, mytap$createdOn, mytap2)
mytap2 = as.data.frame(mytap2)
names(mytap2)[1] = c("createdOn")
mytap2$healthCode = mytap$healthCode
y <- dplyr::select(tapdata2, healthCode, professional.diagnosis)
y <- unique(y)
y <- arrange(y, healthCode)
x = list()
for (i in 1:nrow(y)){
temp = dplyr::select(filter(mytap2, healthCode==y$healthCode[i]), createdOn:corXY)
temp$createdOn_scaled = temp$createdOn - temp$createdOn[1]
temp <- temp %>% dplyr::select(createdOn, createdOn_scaled, everything())
x[[y$healthCode[i]]] = temp
}
library(keras)
library(dplyr)
rm(list=ls())
setwd("C:/Workspace/Park-n-Sing/Rscripts")
cat('Loading data...\n')
load('../Data/tapdata_dataforLSTM_byperson2.RData')
glimpse(data.train)
data.train[[1]]
data.test[[1]]
load(file = "../Data/tapdata_dataforLSTM_byperson.RData")
mytap <- arrange(tapdata2, healthCode, createdOn)
mytap$createdOn = mytap$createdOn/1000
mytap2 <- dplyr::select(mytap, meanTapInter:corXY)
mytap2 = scale(mytap2, scale = TRUE) ## scale each column
mytap2 = cbind(mytap$createdOn, mytap2)
#mytap2 = cbind(mytap$healthCode, mytap$createdOn, mytap2)
mytap2 = as.data.frame(mytap2)
names(mytap2)[1] = c("createdOn")
mytap2$healthCode = mytap$healthCode
y <- dplyr::select(tapdata2, healthCode, professional.diagnosis)
y <- unique(y)
y <- arrange(y, healthCode)
x = list()
for (i in 1:nrow(y)){
temp = dplyr::select(filter(mytap2, healthCode==y$healthCode[i]), createdOn:corXY)
temp$createdOn_scaled = temp$createdOn - temp$createdOn[1]
temp <- temp %>% dplyr::select(createdOn_scaled, everything())
x[[y$healthCode[i]]] = temp
}
healthCode = y$healthCode
set.seed(999)
train.percent = 0.7
train.healthCode = sample(healthCode, length(healthCode)*train.percent)
test.healthCode =  healthCode[!healthCode %in% train.healthCode]
data.train = x[train.healthCode]
data.test = x[test.healthCode]
save(x, y, mytap2, healthCode, train.healthCode, test.healthCode, data.train, data.test, file = "../Data/tapdata_dataforLSTM_byperson2.RData")
rm(list=ls())
setwd("C:/Workspace/Park-n-Sing/Rscripts")
cat('Loading data...\n')
load('../Data/tapdata_dataforLSTM_byperson2.RData')
data.train[[1]]
names(tap2)
names(mytap2)
data.train[[1]]
healthCode
names(y)
data.test[[1]]
y_train <- y[y$healthCod %in% test.healthCode]
y_train <- y[y$healthCode %in% test.healthCode]
y_train <- y[y$healthCode %in% test.healthCode]
names(y)
y_train <- y[y$healthCode %in% test.healthCode,]
y_train <- y[y$healthCode %in% train.healthCode,]$professional.diagnosis
y_test <- y[y$healthCode %in% test.healthCode,]$professional.diagnosis
summary(y_train)
summary(y_test)
data.train[[1]]
?pad_sequences
x_train <- pad_sequences(
data.train,
maxlen = 5
)
library(keras)
library(dplyr)
x_train <- pad_sequences(
data.train,
maxlen = 5
)
library(keras)
library(dplyr)
rm(list=ls())
setwd("C:/Workspace/Park-n-Sing/Rscripts")
cat('Loading data...\n')
load('../Data/tapdata_dataforLSTM_byperson2.RData')
data.train[[1]]
data.test[[1]]
y_train <- y[y$healthCode %in% train.healthCode,]$professional.diagnosis
y_test <- y[y$healthCode %in% test.healthCode,]$professional.diagnosis
x_train <- pad_sequences(
data.train,
maxlen = 5
)
library(keras)
max_features <- 20000
batch_size <- 32
# Cut texts after this number of words (among top max_features most common words)
maxlen <- 80
cat('Loading data...\n')
imdb <- dataset_imdb(num_words = max_features)
